
-> FUNÇÃO PARA SALVAR STRING
==> fgets : Está função tem como objetivo ler os valores inseridos pelo teclado e salva-los. A primeira vez que eu usei foi:
fdets(u->nome,50,stdin)

nesse momento eu estou falando que:
-eu vou pegar o que o usuário colocou no struct "u", na variável "nome";
-50 vai dizer sobre o tamanho do array;
-stdin representa a entrada do dado.

OBS!!
 Em alguns casos, como essa função lê o que vem do teclado, é possível que aconteça alguns erros, como por exemplo se ela vier depois de um scanf. se isso acontecer 
 é necessário limpar o buffer, como isso é feito? 
 int c;
 while((c = getchar()) != '\n' && c != EOF)

    while   ===   aqui eu estou fazendo um loop que vai rodar enquanto as condições que eu der forem verdadeiras, ou seja, o ultimo caracter não pode ser um '\n' e o 
                    usuario não pode ter encerrado o arquivo (EOF, ou End of File)
    c = getchar()   ====   aqui eu estou atribuindo c a função getchar, que vai atribuir o último caracter lido
    != '\n'   ===   aqui eu estou verificando se o ultimo caracter lido não é uma quebra de linha


-> DECLARAÇÃO ANTECIPADA DE FUNÇÃO (forward declaration)
==> Aqui eu estou dizendo ao compilador que existe uma função que vira com esse nome e esses parâmetros. Isso vai servir pois, como o compilador vai ler o código 
de cima para baixo, ele pode acabar lendo uma função x, que dentro dela vai usar uma função y, porém essa função y ainda não foi definida até a linha que o compilador está.
A declaração antecipada é para resolver esse tipo de problema


=> O LIMITE PARA INT É DOIS BILHÕES... 
Infelizmente aprendi isso da pior forma, estava usando o cpf como um int, porem ele correponderia a um número com dez milhões, e por isso eu precisei usar o long long... 

long long int === é usado quando você sabe que um número vai passar dos dois bilhoes do int. Ele pode guardar até nove quintilhoes (não tenho ideia do quanto isso significa... )

-> Na verdade, eu nem fiz dessa forma, no final das contas fiz usando char mesmo, fica melhor e me possibilita criar algum tipo de validação.



=> STRCMP (comparar string):
 Depois que eu mudei o tipo da variável cpf eu tive dificuldade de validar ela, pois eu estava fazendo algo como:
(string1 == string2).
porém isso não estava funcionando. Verifiquei que para comparar string eu deveria usar a função strcmp, da seguinte forma:
strcmp(string1, string2)


=> REMOÇÃO DO "\n" PARA NÃO TER PROBLEMAS DE VERIFICAÇÃO
Precisei adotar uma "função", para não ter problemas com o fgets. quando você aperta o enter depois do fgets ele cria algo como uma linha em branco, e isso me prejudicou 
quando eu estava fazendo a verificação do cpf para fazer novos jogos, verificar jogos, etc...